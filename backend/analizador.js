/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,13],$V2=[1,12],$V3=[1,10],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,11],$Va=[2,5,12,13,30,33,34,35,36,37,75],$Vb=[1,23],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[13,22,32],$Vg=[1,30],$Vh=[1,31],$Vi=[1,40],$Vj=[1,38],$Vk=[1,37],$Vl=[1,39],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[2,5,12,13,14,29,30,33,34,35,36,37,46,57,58,59,60,61,62,63,64,66,68,69,70,71,72,73,75,87,88,91,92,93,97,98,99,100],$VB=[1,80],$VC=[1,82],$VD=[1,86],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,81],$VN=[1,83],$VO=[1,84],$VP=[1,85],$VQ=[11,15,19,23,29,31,32,43,44,45,46,47,48,49,50,51,52,53,54,55,56],$VR=[1,95],$VS=[1,96],$VT=[1,114],$VU=[15,19],$VV=[11,15,19,23,29,43,44,55,56],$VW=[1,155],$VX=[15,19,29],$VY=[1,158],$VZ=[1,173],$V_=[1,172],$V$=[1,177],$V01=[1,176],$V11=[1,171],$V21=[1,174],$V31=[1,178],$V41=[1,179],$V51=[1,180],$V61=[1,175],$V71=[11,15,19,23,29,31,32,43,44,45,46,51,52,53,54,55,56],$V81=[11,15,19,23,29,31,32,43,44,45,46,47,48,50,51,52,53,54,55,56],$V91=[11,15,19,23,29,31,32,43,44,51,52,53,54,55,56],$Va1=[13,29,30,33,34,35,36,37,87,88,91,92,93,97,98,99,100],$Vb1=[2,114],$Vc1=[13,14,46,57,58,59,60,61,62,63,64,66,68,69,70,71,72,73],$Vd1=[1,274],$Ve1=[1,275],$Vf1=[29,103,104],$Vg1=[1,301],$Vh1=[13,29,30,33,34,35,36,37,87,88,91,92,93,94,97,98,99,100],$Vi1=[13,30,33,34,35,36,37,87,88,91,92,93,97,98,99,100],$Vj1=[2,122],$Vk1=[2,121];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"DEC_MET":8,"AS_VAR":9,"EXEC":10,"ptcoma":11,"exec":12,"identificador":13,"parA":14,"parC":15,"LISTAVALORES":16,"LLAMADA_METODO":17,"LLAMADA_EX":18,"coma":19,"EXPRESION":20,"igual":21,"corA":22,"corC":23,"punto":24,"add":25,"TIPO":26,"nnew":27,"llaveA":28,"llaveC":29,"list":30,"menor":31,"mayor":32,"int":33,"string":34,"boolean":35,"double":36,"char":37,"TIPOCASTEO":38,"INCREMENTOS":39,"masmas":40,"menosmenos":41,"TERNARIO":42,"interrogacion":43,"dospuntos":44,"suma":45,"menos":46,"multi":47,"div":48,"exponente":49,"modulo":50,"igualigual":51,"diferente":52,"menorigual":53,"mayorigual":54,"or":55,"and":56,"not":57,"tostring":58,"NUMBER":59,"NUMBERD":60,"true":61,"false":62,"CADENA":63,"CARACTER":64,"FUNCIONESSYSTEM":65,"length":66,"LONGPARAM":67,"toLower":68,"toUpper":69,"truncate":70,"round":71,"typeof":72,"tochararray":73,"cadenatexto":74,"void":75,"OPCIONESMETODO":76,"LISTAPARAMETROS":77,"PARAMETROS":78,"CUERPOMETODO":79,"WHILE":80,"IMPRIMIR":81,"IF":82,"SWITCH":83,"DOWHILE":84,"FOR":85,"TRANSFERENCIA":86,"print":87,"for":88,"FORAS":89,"FORACT":90,"do":91,"while":92,"if":93,"else":94,"ELSEIF":95,"CONEIF":96,"break":97,"continue":98,"return":99,"switch":100,"LCASOS":101,"CASO":102,"case":103,"default":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"ptcoma",12:"exec",13:"identificador",14:"parA",15:"parC",19:"coma",21:"igual",22:"corA",23:"corC",24:"punto",25:"add",27:"nnew",28:"llaveA",29:"llaveC",30:"list",31:"menor",32:"mayor",33:"int",34:"string",35:"boolean",36:"double",37:"char",40:"masmas",41:"menosmenos",43:"interrogacion",44:"dospuntos",45:"suma",46:"menos",47:"multi",48:"div",49:"exponente",50:"modulo",51:"igualigual",52:"diferente",53:"menorigual",54:"mayorigual",55:"or",56:"and",57:"not",58:"tostring",59:"NUMBER",60:"NUMBERD",61:"true",62:"false",63:"CADENA",64:"CARACTER",66:"length",68:"toLower",69:"toUpper",70:"truncate",71:"round",72:"typeof",73:"tochararray",74:"cadenatexto",75:"void",87:"print",88:"for",91:"do",92:"while",93:"if",94:"else",97:"break",98:"continue",99:"return",100:"switch",103:"case",104:"default"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[10,5],[10,6],[17,4],[17,5],[18,3],[18,4],[16,3],[16,1],[9,4],[9,7],[9,7],[7,3],[7,5],[7,11],[7,9],[7,12],[7,8],[26,1],[26,1],[26,1],[26,1],[26,1],[38,1],[38,1],[38,1],[39,2],[39,2],[42,5],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,4],[20,4],[20,6],[20,4],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[67,1],[67,1],[8,7],[8,8],[8,7],[8,8],[77,3],[77,1],[78,2],[76,2],[76,1],[76,2],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,2],[81,5],[85,10],[89,1],[89,1],[90,3],[90,1],[84,9],[80,7],[82,7],[82,11],[82,8],[82,12],[95,2],[95,1],[96,8],[86,2],[86,2],[86,2],[86,3],[83,7],[101,2],[101,1],[102,6],[102,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var a={'errores':lista_Errores,'arbol':$$[$0-1]}; lista_Errores=[]; return a;
break;
case 2: case 85: case 111:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 83: case 86: case 112:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 65: case 66: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97:
this.$=$$[$0]
break;
case 8:
this.$ = ""; var nuevo=new ERROR(TIPO_ERROR.SINTACTICO,"Falto un \";\",Error recuperado: "+yytext,this._$.first_line, (this._$.first_column+1));lista_Errores.push(nuevo);
break;
case 9:
this.$ = INSTRUCCION.nuevoExec($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevoExec($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 12:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 13:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-2], null, this._$.first_line,this._$.first_column+1)
break;
case 14:
this.$ = INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 15:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 16:
this.$=[$$[$0]]
break;
case 17:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-3], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 18:
this.$ = INSTRUCCION.nuevaAsigVector($$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 19:
this.$ = INSTRUCCION.nuevaAddLista($$[$0-6],$$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 20:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1], null, $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 21:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3], $$[$0-1], $$[$0-4], this._$.first_line,this._$.first_column+1)
break;
case 22:
this.$ = INSTRUCCION.nuevaDeclaracion_Vector($$[$0-7], $$[$0-2],null,TIPO_DATO.VECTOR ,$$[$0-10], this._$.first_line, (this._$.first_column+1));
break;
case 23:
this.$ = INSTRUCCION.nuevaDeclaracion_Vector($$[$0-5], 0,$$[$0-2],TIPO_DATO.VECTOR, $$[$0-8], this._$.first_line, (this._$.first_column+1));
break;
case 24:
this.$ = INSTRUCCION.nuevaDeclaracion_Vector($$[$0-7], 0,null,TIPO_DATO.LISTA ,$$[$0-9], this._$.first_line, (this._$.first_column+1));
break;
case 25:
this.$ = INSTRUCCION.nuevaDeclaracion_2($$[$0-3], 0,$$[$0-1],TIPO_DATO.LISTA ,$$[$0-5], this._$.first_line, (this._$.first_column+1));
break;
case 26: case 32:
this.$ = TIPO_DATO.ENTERO
break;
case 27:
this.$ = TIPO_DATO.CADENA
break;
case 28:
this.$ = TIPO_DATO.BANDERA
break;
case 29: case 31:
this.$ = TIPO_DATO.DECIMAL
break;
case 30: case 33:
this.$ = TIPO_DATO.CARACTER
break;
case 34:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoValor( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.SUMA, this._$.first_line, (this._$.first_column+1));
break;
case 35:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor( $$[$0-1], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1)),INSTRUCCION.nuevoValor( 1, TIPO_VALOR.ENTERO, this._$.first_line, (this._$.first_column+1)),TIPO_OPERACION.RESTA, this._$.first_line, (this._$.first_column+1));
break;
case 36:
this.$ = INSTRUCCION.nuevoTernario($$[$0-4],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 37:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 41:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 42:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 43:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],null, TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1);
break;
case 44:
this.$=$$[$0-1]
break;
case 45:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1);
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 48:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 49:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 50:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1);
break;
case 51:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1);
break;
case 52:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1);
break;
case 53:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0],null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1);
break;
case 54:
 this.$ = INSTRUCCION.nuevoCasteo($$[$0-2],$$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 55:
this.$ = INSTRUCCION.nuevoAccesoVector( $$[$0-3], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 56:
this.$ = INSTRUCCION.nuevoAccesoLista( $$[$0-5], $$[$0-2], this._$.first_line, (this._$.first_column+1));
break;
case 57:
 this.$ = INSTRUCCION.nuevoCasteo(TIPO_DATO.CADENA,$$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 58:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.ENTERO, this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.DECIMAL, this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 61:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BANDERA, this._$.first_line,this._$.first_column+1)
break;
case 62:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CADENA, this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CARACTER, this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 67: case 68:
this.$=$$[$0];
break;
case 69:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LENGTH, this._$.first_line, (this._$.first_column+1));
break;
case 70:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.LOWER, this._$.first_line, (this._$.first_column+1));
break;
case 71:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.UPPER, this._$.first_line, (this._$.first_column+1));
break;
case 72:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TRUNCATE, this._$.first_line, (this._$.first_column+1));
break;
case 73:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.ROUND, this._$.first_line, (this._$.first_column+1));
break;
case 74:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TYPEOF, this._$.first_line, (this._$.first_column+1));
break;
case 75:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-1],$$[$0-1], TIPO_OPERACION.TOCHARARRAY, this._$.first_line, (this._$.first_column+1));
break;
case 76:
this.$ = INSTRUCCION.nuevoValor( $$[$0], TIPO_VALOR.CADENA, this._$.first_line, (this._$.first_column+1));
break;
case 77:
this.$ = INSTRUCCION.nuevoValor( $$[$0], TIPO_VALOR.IDENTIFICADOR,this._$.first_line, (this._$.first_column+1));
break;
case 78:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 79:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 80:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-6],$$[$0-5], null, $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 81:
this.$ = INSTRUCCION.nuevaFuncion($$[$0-7],$$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 82:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 84:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 87:
this.$ = [];var nuevo=new ERROR(TIPO_ERROR.SINTACTICO,"Falto un \";\",Error recuperado: "+yytext,this._$.first_line, (this._$.first_column+1));lista_Errores.push(nuevo);
break;
case 98:
this.$ = INSTRUCCION.nuevaAsignacion2($$[$0-1], this._$.first_line, (this._$.first_column+1));
break;
case 99:
this.$ = new INSTRUCCION.nuevoCout($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 100:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7],$$[$0-6], $$[$0-4],$$[$0-1] , this._$.first_line,(this._$.first_column+1));
break;
case 101: case 102:
this.$ = $$[$0];
break;
case 103:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 104:
this.$ = INSTRUCCION.nuevaAsignacion2($$[$0], this._$.first_line, (this._$.first_column+1));
break;
case 105:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6] , this._$.first_line,(this._$.first_column+1));
break;
case 106:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 107:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 108:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 109:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 110:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 113:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 114:
this.$ = new INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 115:
this.$ = new INSTRUCCION.nuevoContinue(this._$.first_line, (this._$.first_column+1));
break;
case 116:
this.$ = new INSTRUCCION.nuevoReturn(null,this._$.first_line, (this._$.first_column+1));
break;
case 117:
this.$ = new INSTRUCCION.nuevoReturn($$[$0-1],this._$.first_line, (this._$.first_column+1));
break;
case 118:
 this.$ = INSTRUCCION.nuevoSwitch($$[$0-4],$$[$0-1], this._$.first_line,(this._$.first_column+1));
break;
case 119:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 120:
this.$ = [$$[$0]];
break;
case 121:
 this.$ = INSTRUCCION.nuevoCase($$[$0-4],$$[$0-2], this._$.first_line,(this._$.first_column+1)); 
break;
case 122:
 this.$ = INSTRUCCION.nuevoDefault($$[$0-2], this._$.first_line,(this._$.first_column+1)); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:$V1,13:$V2,26:9,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,75:$V9},{1:[3]},{2:$V0,5:[1,19],6:20,7:4,8:5,9:6,10:7,12:$V1,13:$V2,26:9,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,75:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),{11:[1,21]},{13:[1,22],22:$Vb},{31:[1,24]},{13:[1,25]},{21:$Vc,22:$Vd,24:$Ve},{13:[1,29]},o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),o($Vf,[2,29]),o($Vf,[2,30]),{1:[2,1]},o($Va,[2,2]),o($Va,[2,8]),{11:$Vg,14:[1,32],21:$Vh},{23:[1,33]},{26:34,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{14:[1,35]},{13:$Vi,14:$Vj,18:49,20:36,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:59,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{25:[1,60]},{14:[1,61]},o($VA,[2,20]),{13:$Vi,14:$Vj,18:49,20:62,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{15:[1,63],26:66,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,77:64,78:65},{13:[1,67]},{32:[1,68]},{15:[1,69],26:66,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,77:70,78:65},{11:[1,71],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{13:$Vi,14:$Vj,18:49,20:87,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:88,33:[1,91],36:[1,90],37:[1,92],38:89,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:93,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VQ,[2,64],{14:[1,97],22:[1,94],40:$VR,41:$VS}),{14:[1,98]},o($VQ,[2,58]),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,63]),o($VQ,[2,65]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),{14:[1,99]},{14:[1,100]},{14:[1,101]},{14:[1,102]},{14:[1,103]},{14:[1,104]},{14:[1,105]},{23:[1,106],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{14:[1,107]},{13:$Vi,14:$Vj,15:[1,108],16:109,18:49,20:110,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{11:[1,111],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{28:[1,112]},{15:[1,113],19:$VT},o($VU,[2,83]),{13:[1,115]},{21:[1,116]},{13:[1,117]},{28:[1,118]},{15:[1,119],19:$VT},o($VA,[2,17]),{13:$Vi,14:$Vj,18:49,20:120,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:121,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:122,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:123,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:124,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:125,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:126,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:127,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:128,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:129,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:130,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:131,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:132,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:133,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:134,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VQ,[2,43]),{15:[1,135],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,136]},{15:[2,31]},{15:[2,32]},{15:[2,33]},o($VV,[2,53],{31:$VB,32:$VC,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),{13:$Vi,14:$Vj,18:49,20:137,22:[1,138],39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VQ,[2,34]),o($VQ,[2,35]),{13:$Vi,14:$Vj,15:[1,139],16:140,18:49,20:110,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:141,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:[1,144],67:142,74:[1,143]},{13:$Vi,14:$Vj,18:49,20:145,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:146,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:147,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:148,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:149,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:150,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{21:[1,151]},{13:$Vi,14:$Vj,18:49,20:152,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{11:[1,153]},{15:[1,154],19:$VW},o($VX,[2,16],{31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP}),o($VA,[2,21]),{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:156,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{28:[1,181]},{26:66,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,78:182},o($VU,[2,84]),{27:[1,183],28:[1,184]},{21:[1,185]},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:186,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{28:[1,187]},o($V71,[2,37],{47:$VG,48:$VH,49:$VI,50:$VJ}),o($V71,[2,38],{47:$VG,48:$VH,49:$VI,50:$VJ}),o($V81,[2,39],{49:$VI}),o($V81,[2,40],{49:$VI}),o($VQ,[2,41]),o($V81,[2,42],{49:$VI}),o($V91,[2,45],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o($V91,[2,46],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o($V91,[2,47],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o($V91,[2,48],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o($V91,[2,49],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o($V91,[2,50],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ}),o([11,15,19,23,29,43,44,55],[2,51],{31:$VB,32:$VC,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,56:$VP}),o($VV,[2,52],{31:$VB,32:$VC,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN}),{31:$VB,32:$VC,43:$VD,44:[1,188],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},o($VQ,[2,44]),{13:$Vi,14:$Vj,18:49,20:189,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{23:[1,190],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{13:$Vi,14:$Vj,18:49,20:191,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VQ,[2,13]),{15:[1,192],19:$VW},{15:[1,193],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,194]},{15:[2,76]},{15:[2,77]},{15:[1,195],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,196],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,197],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,198],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,199],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,200],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{13:$Vi,14:$Vj,18:49,20:201,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{15:[1,202],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},o($Va,[2,9]),{11:[1,203]},{13:$Vi,14:$Vj,18:49,20:204,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,205],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o($Va1,[2,86]),{11:[1,207]},o($Va1,[2,88]),o($Va1,[2,89]),o($Va1,[2,90]),o($Va1,[2,91]),o($Va1,[2,92]),o($Va1,[2,93]),o($Va1,[2,94]),o($Va1,[2,95]),o($Va1,[2,96]),o($Va1,[2,97]),{11:[1,208]},{13:[1,209],22:$Vb},{14:[1,210]},{14:[1,211]},{14:[1,212],21:$Vc,22:$Vd,24:$Ve,40:$VR,41:$VS},{14:[1,213]},{14:[1,214]},{28:[1,215]},{14:[1,216]},{11:[1,217]},{11:[1,218]},{11:[1,219],13:$Vi,14:$Vj,18:49,20:220,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:221,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o($VU,[2,82]),{26:222,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{13:$Vi,14:$Vj,16:223,18:49,20:110,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:225,27:[1,224],39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,226],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:227,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{13:$Vi,14:$Vj,18:49,20:228,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VQ,[2,54]),o($VQ,[2,55]),{23:[1,229],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},o($VQ,[2,14]),o($VQ,[2,57]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),{11:[1,230],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{11:[1,231]},o($Va,[2,10]),o($VX,[2,15],{31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP}),o($Va,[2,80]),o($Va1,[2,85]),o($Va1,[2,87]),o($Va1,[2,98]),{11:$Vg,21:$Vh},{13:$Vi,14:$Vj,18:49,20:232,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:233,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,15:[1,234],16:235,18:49,20:110,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:236,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{13:$Vi,14:$Vj,18:49,20:237,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:238,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{7:240,9:241,13:$V2,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,89:239},o($Va1,$Vb1),o($Va1,[2,115]),o($Va1,[2,116]),{11:[1,242],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,243],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{22:[1,244]},{19:$VW,29:[1,245]},{30:[1,246]},{11:[1,247],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},o($Va,[2,78]),{7:159,9:162,13:$VZ,17:163,26:170,29:[1,248],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o([11,15,19,23,29,43,44],[2,36],{31:$VB,32:$VC,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP}),{23:[1,249]},o($VA,[2,18]),o($VA,[2,19]),{15:[1,250],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,251],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{11:[1,252]},{15:[1,253],19:$VW},{15:[1,254],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{15:[1,255],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,256],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{13:$Vi,14:$Vj,18:49,20:257,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($Vc1,[2,101]),o($Vc1,[2,102]),o($Va1,[2,117]),o($Va,[2,81]),{13:$Vi,14:$Vj,18:49,20:258,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{11:[1,259]},{31:[1,260]},o($VA,[2,25]),o($Va,[2,79]),o($VQ,[2,56]),{28:[1,261]},{11:[1,262]},o($Va1,[2,11]),{11:[1,263]},{28:[1,264]},{28:[1,265]},{92:[1,266]},{11:[1,267],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{23:[1,268],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},o($VA,[2,23]),{26:269,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:270,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o($Va1,[2,99]),o($Va1,[2,12]),{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:271,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{101:272,102:273,103:$Vd1,104:$Ve1},{14:[1,276]},{13:[1,278],39:279,90:277},{11:[1,280]},{32:[1,281]},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,282],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,283],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{29:[1,284],102:285,103:$Vd1,104:$Ve1},o($Vf1,[2,120]),{13:$Vi,14:$Vj,18:49,20:286,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{44:[1,287]},{13:$Vi,14:$Vj,18:49,20:288,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{15:[1,289]},{21:[1,290],40:$VR,41:$VS},{15:[2,104]},o($VA,[2,22]),{11:[1,291]},o($Va1,[2,106]),o($Va1,[2,107],{95:293,96:294,94:[1,292]}),o($Va1,[2,118]),o($Vf1,[2,119]),{31:$VB,32:$VC,43:$VD,44:[1,295],45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:296,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{15:[1,297],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{28:[1,298]},{13:$Vi,14:$Vj,18:49,20:299,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},o($VA,[2,24]),{28:[1,300],93:$Vg1},o($Va1,[2,109],{96:303,94:[1,302]}),o($Vh1,[2,112]),{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:304,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:[1,305],98:$V41,99:$V51,100:$V61},{11:[1,306]},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:307,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{15:[2,103],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:308,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{14:[1,309]},{28:[1,310],93:$Vg1},o($Vh1,[2,111]),{7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:[1,311],98:$V41,99:$V51,100:$V61},{11:[1,312]},o($Va1,[2,105]),{7:159,9:162,13:$VZ,17:163,26:170,29:[1,313],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,314],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{13:$Vi,14:$Vj,18:49,20:315,39:48,42:50,46:$Vk,57:$Vl,58:$Vm,59:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:51,66:$Vt,68:$Vu,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz},{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:316,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{11:[1,317]},o($Vi1,$Vb1,{29:$Vj1,103:$Vj1,104:$Vj1}),o($Va1,[2,100]),o($Va1,[2,108]),{15:[1,318],31:$VB,32:$VC,43:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,319],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o($Vi1,$Vb1,{29:$Vk1,103:$Vk1,104:$Vk1}),{28:[1,320]},o($Va1,[2,110]),{2:$VY,7:159,9:162,13:$VZ,17:163,26:170,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,76:321,79:157,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},{7:159,9:162,13:$VZ,17:163,26:170,29:[1,322],30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:169,79:206,80:160,81:161,82:164,83:165,84:166,85:167,86:168,87:$V_,88:$V$,91:$V01,92:$V11,93:$V21,97:$V31,98:$V41,99:$V51,100:$V61},o($Vh1,[2,113])],
defaultActions: {19:[2,1],90:[2,31],91:[2,32],92:[2,33],143:[2,76],144:[2,77],279:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  var lista_Errores = []
  const TIPO_ERROR        = require('./controller/Ambito/TipoError');
  const ERROR            = require("./controller/Ambito/Error")
	const TIPO_OPERACION	= require('./controller/Enums/TipoOperacion');
	const TIPO_VALOR 		= require('./controller/Enums/TipoValor');
	const TIPO_DATO			= require('./controller/Enums/TipoDato'); //para jalar el tipo de dato
	const INSTRUCCION	= require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario unilinea 
break;
case 2:// comentario en varias lineas
break;
case 3:return 75
break;
case 4:return 27
break;
case 5:return 33
break;
case 6:return 36
break;
case 7:return 35
break;
case 8:return 37
break;
case 9:return 34
break;
case 10:return 61
break;
case 11:return 62
break;
case 12:return 25
break;
case 13:return 68
break;
case 14:return 69
break;
case 15:return 66
break;
case 16:return 70
break;
case 17:return 71
break;
case 18:return 72
break;
case 19:return 58
break;
case 20:return 73
break;
case 21:return 60
break;
case 22:return 59
break;
case 23:return 87
break;
case 24:return 92
break;
case 25:return 12
break;
case 26:return 93
break;
case 27:return 100
break;
case 28:return 103
break;
case 29:return 97
break;
case 30:return 99
break;
case 31:return 98
break;
case 32:return 88
break;
case 33:return 91
break;
case 34:return 94
break;
case 35:return 104
break;
case 36:return 30
break;
case 37:return 58
break;
case 38:return 43
break;
case 39:return 55
break;
case 40:return 51
break;
case 41:return 56
break;
case 42:return 21
break;
case 43:return 52
break;
case 44:return 53
break;
case 45:return 54
break;
case 46:return 32
break;
case 47:return 31
break;
case 48:return 19
break;
case 49:return 11
break;
case 50:return 28
break;
case 51:return 29
break;
case 52:return 47
break;
case 53:return 40
break;
case 54:return 44
break;
case 55:return 24
break;
case 56:return 41
break;
case 57:return 48
break;
case 58:return 46
break;
case 59:return 45
break;
case 60:return 49
break;
case 61:return 57
break;
case 62:return 50
break;
case 63:return 14
break;
case 64:return 15
break;
case 65:return 'PI'
break;
case 66:return 22
break;
case 67:return 23
break;
case 68:return 'E'
break;
case 69:return 13
break;
case 70:return 63
break;
case 71:return 64
break;
case 72:return 5
break;
case 73: var nuevo=new ERROR(TIPO_ERROR.LEXICO,"Caracter invalido: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);lista_Errores.push(nuevo);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:void\b)/i,/^(?:new\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:add\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:print\b)/i,/^(?:while\b)/i,/^(?:exec\b)/i,/^(?:if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:default\b)/i,/^(?:list\b)/i,/^(?:toString\b)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:==)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\+\+)/i,/^(?::)/i,/^(?:\.)/i,/^(?:--)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:PI\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:E\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])?["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}